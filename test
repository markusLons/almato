import sys
from PyQt5.QtWidgets import QApplication, QMainWindow, QToolBar, QAction, QPushButton, QWidget, QScrollArea, QVBoxLayout, QHBoxLayout, QLabel
from PyQt5.QtCore import Qt, QSize
from PyQt5.QtGui import QIcon

import EventManager


class RailroadStationApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Железнодорожная станция")
        self.setGeometry(100, 100, 800, 600)

        self.tool_bar = QToolBar()
        self.addToolBar(Qt.LeftToolBarArea, self.tool_bar)
        simples = EventManager.get_simple_events()
        for simple in simples:
            image_path = simples[simple]["Image"]
            action_button = QAction(QIcon(image_path), simple, self)
            self.tool_bar.addAction(action_button)
            action_button.triggered.connect(lambda _, path=image_path: self.get_widget(path))

        # Создаем виджет с прокруткой
        self.scroll_area = QScrollArea(self)
        self.scroll_area.setWidgetResizable(True)  # Разрешаем прокрутку содержимого
        self.setCentralWidget(self.scroll_area)

        # Создаем виджет для содержимого (горизонтальные полосы и временная шкала)
        self.scroll_content = QWidget(self.scroll_area)
        self.scroll_area.setWidget(self.scroll_content)

        # Устанавливаем вертикальное распределение полос и временной шкалы
        layout = QVBoxLayout()

        # Создаем временную шкалу с интервалом каждый час
        time_scale_layout = QHBoxLayout()
        for hour in range(24):
            time_label = QLabel(f"{hour}:00")
            time_label.setFixedSize(80, 50)
            time_scale_layout.addWidget(time_label)

        layout.addLayout(time_scale_layout)

        # Создаем горизонтальные полосы (в этом примере 6 штук)
        self.horizontal_lines = []
        for _ in range(6):
            line = QPushButton("Schedule Line")
            line.setFixedSize(2000, 50)
            self.horizontal_lines.append(line)
            layout.addWidget(line)

        self.scroll_content.setLayout(layout)

        # Список для хранения созданных кнопок
        self.buttons = []

    def get_widget(self, image_path):
        button = DraggableButton(image_path, self.scroll_content)
        # Установите координаты размещения кнопки внутри self.scroll_content
        button.setGeometry(50, 50, 150, 50)
        button.show()
        # Сохраняем ссылку на созданную кнопку
        self.buttons.append(button)


class DraggableButton(QPushButton):
    def __init__(self, image_path, parent=None):
        super().__init__(parent)
        self.setMouseTracking(True)
        self.setIcon(QIcon(image_path))
        self.setIconSize(QSize(50, 50))

        self.dragging = False
        self.offset = None

    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:
            self.dragging = True
            self.offset = event.pos()

    def mouseMoveEvent(self, event):
        if self.dragging:
            new_pos = self.mapToParent(event.pos() - self.offset)
            self.move(new_pos)

    def mouseReleaseEvent(self, event):
        if event.button() == Qt.LeftButton:
            self.dragging = False


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = RailroadStationApp()
    window.show()
    sys.exit(app.exec_())
